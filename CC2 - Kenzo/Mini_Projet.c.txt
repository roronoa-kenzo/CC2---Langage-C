#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#include <SDL/SDL.h>
#include <SDL/SDL_gfxPrimitives.h>
/* Paramètres de la fenêtre : */
const int largeur = 800;
const int hauteur = 800;
const char * titre = "ESGI single shooter";
/* Coordonnées du joueur : */
int px, py;
/* Ligne de tir du joueur : */
int slpx, slpy;
/* Vitesse du joueur : */
int pv;
/* Coordonnées de l'adversaire : */
int ax, ay;
/* Vitesse de l'adversaire : */
int av;
void joueur_se_dirige_vers(int tx, int ty) {
    // déplace le joueur qui est px et py vers l'ennemi tx ty en pas
    int dx = tx - px;
    int dy = ty - py;
    double dist = sqrt(dx*dx + dy*dy);
    px += (int)((dx / dist) * pv);
    py += (int)((dy / dist) * pv);
}

void adversaire_se_dirige_vers(int tx, int ty) {
    // Déplace l'adversaire qui est ax et ay vers tx et ty par pas
    int dx = tx - ax;
    int dy = ty - ay;
    double dist = sqrt(dx*dx + dy*dy);
    ax += (int)((dx / dist) * av);
    ay += (int)((dy / dist) * av);
}

void joueur_regarde(int tx, int ty) {
    // Oriente slpx etslpy vers tx, ty
    slpx = tx;
    slpy = ty;
}

int distance_tir(int x, int y) {
    // calcule la distance de la position x et y de la ligne de tir
    double a = slpy - py;
    double b = -(slpx - px);
    double c = -a * px - b * py;
    double dist = fabs(a * x + b * y + c) / sqrt(a * a + b * b);
    return (int)dist;
}

void place_adversaire() {
    // place l'adversaire avec ax et ay aleatoirement en coin de la fenetre
    ax = rand() % largeur;
    ay = rand() % hauteur;
    if (rand() % 2 == 0) {
        ax = rand() % 2 ? 0 : largeur;
        ay = rand() % hauteur;
    } else {
        ax = rand() % largeur;
        ay = rand() % 2 ? 0 : hauteur;
    }
}

int distance_joueur(int x, int y) {
    // calculer la distance d'une position x, y from the joueur
    int dx = x - px;
    int dy = y - py;
    return (int)sqrt(dx*dx + dy*dy);
}
void affichage(SDL_Surface * ecran) {
/* Remplissage de l'écran par un gris foncé uniforme : */
SDL_FillRect(ecran, NULL, SDL_MapRGB(ecran->format, 51, 51, 51));
/* Affichage du joueur : */
filledCircleRGBA(ecran, px, py, 25, 51, 204, 51, 255);
/* Affichage de l'adversaire : */
filledCircleRGBA(ecran, ax, ay, 25, 204, 51, 51, 255);
lineRGBA(ecran, px, py, slpx, slpy, 102, 255, 102, 255);
}
int main() {
srand(time(NULL));
/* Création d'une fenêtre SDL : */
if(SDL_Init(SDL_INIT_EVERYTHING) != 0) {
fprintf(stderr, "Error in SDL_Init : %s\n", SDL_GetError());
exit(EXIT_FAILURE);
}
SDL_Surface * ecran = NULL;
if((ecran = SDL_SetVideoMode(largeur, hauteur, 32, SDL_HWSURFACE |
,→ SDL_DOUBLEBUF)) == NULL) {
fprintf(stderr, "Error in SDL_SetVideoMode : %s\n", SDL_GetError());
SDL_Quit();
exit(EXIT_FAILURE);
}
SDL_WM_SetCaption(titre, NULL);
/* Placement du joueur au centre de la fenêtre : */
px = ecran->w / 2;
py = ecran->h / 2;
pv = 10;
ax = ecran->w / 2;
ay = 0;
av = 5;
int active = 1;
int grab = 0;

SDL_Event event;
int last_mouse_x = px;
int last_mouse_y = py;
int score = 0;
char display[100];
while(active) {
affichage(ecran);
sprintf(display, "Score : %d", score);
stringRGBA(ecran, 5, 5, display, 255, 255, 255, 255);
SDL_Flip(ecran);
while(SDL_PollEvent(&event)) {
switch(event.type) {
/* Utilisateur clique sur la croix de la fenêtre : */
case SDL_QUIT : {
active = 0;
} break;
/* Utilisateur enfonce une touche du clavier : */
case SDL_KEYDOWN : {
switch(event.key.keysym.sym) {
/* Touche Echap : */
case SDLK_ESCAPE : {
active = 0;
} break;
}
} break;
/* Utilisateur commence le clic : */
case SDL_MOUSEBUTTONDOWN : {
switch(event.button.button) {
case SDL_BUTTON_LEFT : {
grab = 1;
last_mouse_x = event.button.x;
last_mouse_y = event.button.y;
} break;
case SDL_BUTTON_RIGHT : {
if(abs(distance_tir(ax, ay)) < 25) {
++score;
++pv;

++av;
place_adversaire();
}
} break;
}
} break;
/* Utilisateur relâche le clic : */
case SDL_MOUSEBUTTONUP : {
switch(event.button.button) {
case SDL_BUTTON_LEFT : {
grab = 0;
} break;
}
} break;
/* Utilisateur bouge la souris : */
case SDL_MOUSEMOTION : {
last_mouse_x = event.motion.x;
last_mouse_y = event.motion.y;
} break;
}
}
if(grab) {
joueur_se_dirige_vers(last_mouse_x, last_mouse_y);
}
joueur_regarde(last_mouse_x, last_mouse_y);
adversaire_se_dirige_vers(px, py);
if(distance_joueur(ax, ay) < 25) {
SDL_FillRect(ecran, NULL, SDL_MapRGB(ecran->format, 204, 51, 51));
filledCircleRGBA(ecran, px, py, 25, 0, 0, 0, 255);
stringRGBA(ecran, 5, 5, display, 255, 255, 255, 255);
SDL_Flip(ecran);
SDL_Delay(1000);
active = 0;
}
SDL_Delay(1000 / 60);
}
SDL_FreeSurface(ecran);
SDL_Quit();
exit(EXIT_SUCCESS);
}
